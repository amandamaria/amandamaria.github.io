{"version":3,"file":"index.modern.js","sources":["../src/misc/timestamp-parser.ts","../src/misc/document-parser.ts","../src/misc/arrayHelpers.ts","../src/misc/objectFlatten.ts","../src/misc/logger/logger-base.ts","../src/misc/logger/logger.ts","../src/misc/logger/firestore-logger.ts","../src/misc/file-parser.ts","../src/misc/pathHelper.ts","../src/providers/database/firebase/FirebaseWrapper.ts","../src/providers/database/ResourceManager.ts","../src/providers/database/FireClient.ts","../src/misc/metadata-parser.ts","../src/providers/lazy-loading/queryCursors.ts","../src/providers/lazy-loading/paramsToQuery.ts","../src/providers/lazy-loading/FirebaseLazyLoadingClient.ts","../src/providers/DataProvider.ts","../src/misc/status-code-translator.ts","../src/providers/queries/GetList.ts","../src/providers/queries/GetOne.ts","../src/providers/queries/GetMany.ts","../src/providers/queries/GetManyReference.ts","../src/providers/commands/Update.ts","../src/providers/commands/UpdateMany.ts","../src/providers/commands/Create.ts","../src/providers/commands/Delete.ts","../src/providers/commands/Delete.Soft.ts","../src/providers/commands/DeleteMany.ts","../src/providers/commands/DeleteMany.Soft.ts","../src/providers/AuthProvider.ts"],"sourcesContent":["export function parseAllDatesDoc(obj: any) {\n  const isObject = !!obj && typeof obj === 'object';\n  if (!isObject) {\n    return;\n  }\n  Object.keys(obj).map(key => {\n    const value = obj[key];\n    obj[key] = recusivelyCheckObjectValue(value);\n  });\n}\n\nexport function recusivelyCheckObjectValue(input: any): any {\n  const isFalsey = !input;\n  if (isFalsey) {\n    return input;\n  }\n  const isPrimitive = typeof input !== 'object';\n  if (isPrimitive) {\n    return input;\n  }\n  const isTimestamp = !!input.toDate && typeof input.toDate === 'function';\n  if (isTimestamp) {\n    return input.toDate();\n  }\n  const isArray = Array.isArray(input);\n  if (isArray) {\n    return (input as []).map(value => recusivelyCheckObjectValue(value));\n  }\n  const isObject = typeof input === 'object';\n  if (isObject) {\n    Object.keys(input).map(key => {\n      const value = input[key];\n      input[key] = recusivelyCheckObjectValue(value);\n    });\n    return input;\n  }\n}\n","import { QueryDocumentSnapshot } from '@firebase/firestore-types';\nimport { parseAllDatesDoc } from './timestamp-parser';\n\nexport const parseFireStoreDocument = (doc: QueryDocumentSnapshot) => {\n  const data = doc.data();\n  parseAllDatesDoc(data);\n  // React Admin requires an id field on every document,\n  // So we can just using the firestore document id\n  return { id: doc.id, ...data };\n};\n","import { get, isEmpty } from 'lodash';\nimport { getFieldReferences, SearchObj } from './objectFlatten';\n\nexport function sortArray(\n  data: Array<{}>,\n  field: string,\n  dir: 'asc' | 'desc'\n): void {\n  data.sort((a: {}, b: {}) => {\n    const rawA = get(a, field);\n    const rawB = get(b, field);\n    const isAsc = dir === \"asc\";\n\n    const isNumberField = Number.isFinite(rawA) && Number.isFinite(rawB);\n    if (isNumberField) {\n      return basicSort(rawA, rawB, isAsc);\n    }\n    const isStringField = typeof rawA === 'string' && typeof rawB === 'string';\n    if (isStringField) {\n      const aParsed = rawA.toLowerCase();\n      const bParsed = rawB.toLowerCase();\n      return basicSort(aParsed, bParsed, isAsc);\n    }\n    const isDateField = rawA instanceof Date && rawB instanceof Date;\n    if (isDateField) {\n      return basicSort(rawA, rawB, isAsc);\n    }\n    return basicSort(!!rawA, !!rawB, isAsc);\n  });\n}\n\nfunction basicSort(aValue: any, bValue: any, isAsc: boolean) {\n  if (aValue > bValue) {\n    return isAsc ? 1 : -1;\n  }\n  if (aValue < bValue) {\n    return isAsc ? -1 : 1;\n  }\n  return 0;\n}\n\nexport function filterArray(\n  data: Array<{}>,\n  searchFields?: { [field: string]: string | number | boolean | null }\n): Array<{}> {\n  if (!searchFields || isEmpty(searchFields)) {\n    return data;\n  }\n  const searchObjs: SearchObj[] = [];\n  Object.keys(searchFields).map((fieldName) => {\n    const fieldValue = searchFields[fieldName];\n    const getSubObjects = getFieldReferences(fieldName, fieldValue);\n    searchObjs.push(...getSubObjects);\n  });\n  const filtered = data.filter((row) =>\n    searchObjs.reduce((acc, cur) => {\n      const res = doesRowMatch(row, cur.searchField, cur.searchValue);\n      return res && acc;\n    }, true as boolean)\n  );\n  return filtered;\n}\n\nexport function doesRowMatch(\n  row: {},\n  searchField: string,\n  searchValue: any\n): boolean {\n  const searchThis = get(row, searchField);\n  const bothAreFalsey = !searchThis && !searchValue;\n  if (bothAreFalsey) {\n    return true;\n  }\n  const nothingToSearch = !searchThis;\n  if (nothingToSearch) {\n    return false;\n  }\n  const isStringSearch = typeof searchValue === 'string';\n  if (isStringSearch) {\n    return searchThis\n      .toString()\n      .toLowerCase()\n      .includes(searchValue.toLowerCase());\n  }\n  const isBooleanOrNumber =\n    typeof searchValue === 'boolean' || typeof searchValue === 'number';\n  if (isBooleanOrNumber) {\n    return searchThis === searchValue;\n  }\n  return false;\n}\n","export interface SearchObj {\n  searchField: string;\n  searchValue: number | string | boolean | null;\n}\nexport function getFieldReferences(\n  fieldName: string,\n  value: {} | number | string | boolean | null\n): SearchObj[] {\n  const isFalsy = !value;\n  const isSimple = isFalsy ||\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean';\n\n  if (isSimple) {\n    return [\n      {\n        searchField: fieldName,\n        searchValue: value as number | string | boolean | null,\n      },\n    ];\n  }\n  const tree = {} as any;\n  tree[fieldName] = value;\n  return objectFlatten(tree);\n}\n\nexport function objectFlatten(tree: {}): SearchObj[] {\n  var leaves: SearchObj[] = [];\n  var recursivelyWalk = function (obj: any, path: string | null) {\n    path = path || \"\";\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const objVal = obj && obj[key];\n        const currentPath = !!path ? path + \".\" + key : key;\n        const isWalkable =\n          typeof objVal === 'object' || objVal instanceof Array;\n        if (isWalkable) {\n          recursivelyWalk(objVal, currentPath);\n        } else {\n          leaves.push({ searchField: currentPath, searchValue: objVal });\n        }\n      }\n    }\n  };\n  recursivelyWalk(tree, null);\n  return leaves;\n}\n","type LogFn = (...args: any) => void;\n\nexport const LogNoOp: LogFn = (...args: any) => null;\n\nexport class LoggerBase {\n  constructor(private title: string, private cacheEnabledKey: string) {}\n\n  private isEnabled() {\n    return !!localStorage.getItem(this.cacheEnabledKey);\n  }\n\n  SetEnabled(isEnabled: boolean) {\n    if (isEnabled) {\n      localStorage.setItem(this.cacheEnabledKey, 'true');\n    } else {\n      localStorage.removeItem(this.cacheEnabledKey);\n    }\n  }\n\n  public get log() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.log.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n\n  public get warn() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.warn.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n\n  public get error() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.error.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n}\n","import { LoggerBase } from './logger-base';\n\nconst LOGGER_ENABLEDKEY = 'LOGGING_ENABLED';\nexport const logger = new LoggerBase('ðŸ”¥raf:', LOGGER_ENABLEDKEY);\n\nexport const log = logger.log;\nexport const logError = logger.error;\nexport const logWarn = logger.warn;\n","import { RAFirebaseOptions } from 'providers/options';\nimport { LogNoOp, LoggerBase } from './logger-base';\n\nconst LOGGER_ENABLEDKEY = 'LOGGING_FIRESTORE_COSTS_ENABLED';\nconst logger = new LoggerBase('ðŸ’¸firestore-costs:', LOGGER_ENABLEDKEY);\n\nconst KEY_SINGLE = 'firecosts-single-reads';\n\nexport interface IFirestoreLogger {\n  logDocument: (count: number) => Function;\n  SetEnabled: (isEnabled: boolean) => void;\n  ResetCount: (shouldReset: boolean) => void;\n}\n\nexport function MakeFirestoreLogger(\n  options: RAFirebaseOptions\n): IFirestoreLogger {\n  function notEnabled() {\n    return !options?.lazyLoading?.enabled;\n  }\n\n  function incrementRead(incrementBy = 1) {\n    const currentCountRaw = localStorage.getItem(KEY_SINGLE) || '';\n    const currentCount = parseInt(currentCountRaw) || 0;\n    const incremented = currentCount + incrementBy;\n    localStorage.setItem(KEY_SINGLE, incremented + '');\n    return incremented;\n  }\n  function clearCache() {\n    localStorage.removeItem(KEY_SINGLE);\n  }\n  return {\n    SetEnabled(isEnabled: boolean) {\n      logger.SetEnabled(isEnabled);\n    },\n    ResetCount(shouldReset: boolean) {\n      shouldReset && clearCache()\n    },\n    logDocument(docCount: number) {\n      if (notEnabled()) {\n        return LogNoOp;\n      }\n      const count = incrementRead(docCount);\n      const suffix = `+${docCount} (session total=${count} documents read)`;\n      const boundLogFn: (...args: any) => void = logger.log.bind(\n        console,\n        suffix\n      );\n      return boundLogFn;\n    },\n  };\n}\n","import { logError } from './logger';\nimport { IFirebaseWrapper } from '../providers/database/firebase/IFirebaseWrapper';\n\ninterface ParsedUpload {\n  fieldDotsPath: string;\n  fieldSlashesPath: string;\n  rawFile: File | any;\n}\n\nexport function parseDocGetAllUploads(obj: any): ParsedUpload[] {\n  const isObject = !!obj && typeof obj === \"object\";\n  if (!isObject) {\n    return [];\n  }\n  const uploads: ParsedUpload[] = [];\n  Object.keys(obj).map((key) => {\n    const value = obj[key];\n    recusivelyParseObjectValue(value, key, uploads);\n  });\n  return uploads;\n}\n\nexport function recusivelyParseObjectValue(\n  input: any,\n  fieldPath: string,\n  uploads: ParsedUpload[]\n): any {\n  const isFalsey = !input;\n  if (isFalsey) {\n    return input;\n  }\n  const isPrimitive = typeof input !== 'object';\n  if (isPrimitive) {\n    return input;\n  }\n  const isTimestamp = !!input.toDate && typeof input.toDate === 'function';\n  if (isTimestamp) {\n    return input.toDate();\n  }\n  const isArray = Array.isArray(input);\n  if (isArray) {\n    return (input as []).map((value, index) =>\n      recusivelyParseObjectValue(value, `${fieldPath}.${index}`, uploads)\n    );\n  }\n  const isObject = typeof input === 'object';\n  if (!isObject) {\n    return;\n  }\n  const isFileField = !!input && input.hasOwnProperty('rawFile');\n  if (isFileField) {\n    uploads.push({\n      fieldDotsPath: fieldPath,\n      fieldSlashesPath: fieldPath.split('.').join('/'),\n      rawFile: input.rawFile\n    });\n    delete input.rawFile;\n    return;\n  }\n  Object.keys(input).map((key) => {\n    const value = input[key];\n    recusivelyParseObjectValue(value, `${fieldPath}.${key}`, uploads);\n  });\n  return input;\n}\n\nexport const recursivelyMapStorageUrls = async (\n  fireWrapper: IFirebaseWrapper,\n  fieldValue: any\n): Promise<any> => {\n  const isArray = Array.isArray(fieldValue);\n  const isObject = !isArray && typeof fieldValue === \"object\";\n  const isFileField = isObject && !!fieldValue && fieldValue.hasOwnProperty(\"src\");\n  if (isFileField) {\n    const isAlreadyUploaded = fieldValue.src.startsWith('https://');\n    if (isAlreadyUploaded) {\n      return fieldValue;\n    }\n    let ref: firebase.storage.Reference = null as any;\n    try {\n      ref = fireWrapper.storage().ref(fieldValue.src);\n      const src = await ref.getDownloadURL();\n      return {\n        ...fieldValue,\n        src\n      };\n    } catch (error) {\n      logError(`Error when getting download URL`, {\n        error,\n        fieldValue,\n        ref\n      });\n      return fieldValue;\n    }\n  } else if (isObject) {\n    for (let key in fieldValue) {\n      if (fieldValue.hasOwnProperty(key)) {\n        const value = fieldValue[key];\n        fieldValue[key] = await recursivelyMapStorageUrls(fireWrapper, value);\n      }\n    }\n\n    return fieldValue;\n  } else if (isArray) {\n    for (let i = 0; i < fieldValue.length; i++) {\n      fieldValue[i] = await recursivelyMapStorageUrls(fireWrapper, fieldValue[i])\n    }\n\n    return fieldValue;\n  }\n\n  return fieldValue;\n};\n","import path from \"path-browserify\";\n\nexport function getAbsolutePath(\n  rootRef: undefined | string | (() => string),\n  relativePath: string | null\n): string {\n  if (!rootRef) {\n    return relativePath+'';\n  }\n  if (!relativePath) {\n    throw new Error(\n      \"Resource name must be a string of length greater than 0 characters\"\n    );\n  }\n  const rootRefValue = typeof rootRef === \"string\" ? rootRef : rootRef();\n  const withSlashes = path.join(\"/\", rootRefValue, \"/\", relativePath, \"/\");\n  const slashCount = withSlashes.split(\"/\").length - 1;\n  if (slashCount % 2) {\n    throw new Error(`The rootRef path must point to a \"document\"\n    not a \"collection\"e.g. /collection/document/ or\n    /collection/document/collection/document/`);\n  }\n  return withSlashes.slice(1, -1);\n}\n\nexport function joinPaths(...args: string[]) {\n  return path.join(...args);\n}\n","import { FireApp, IFirebaseWrapper } from './IFirebaseWrapper';\n\nimport firebase, { User } from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/storage';\nimport { log } from 'misc';\nimport { RAFirebaseOptions } from 'providers/options';\n\nexport class FirebaseWrapper implements IFirebaseWrapper {\n  private firestore: firebase.firestore.Firestore = null as any;\n  private app: FireApp = null as any;\n  public options: RAFirebaseOptions = {};\n\n  public GetApp(): FireApp {\n    return this.app;\n  }\n\n  constructor() {}\n\n  public init(firebaseConfig: {}, options?: RAFirebaseOptions): void {\n    const optionsSafe = options || {};\n    this.options = optionsSafe;\n    this.app = ObtainFirebaseApp(firebaseConfig, optionsSafe);\n    this.firestore = this.app.firestore();\n  }\n  public db(): firebase.firestore.Firestore {\n    return this.firestore;\n  }\n  public serverTimestamp() {\n    // This line doesn't work for some reason, might be firebase sdk.\n    // return firebase.firestore.FieldValue.serverTimestamp();\n    return new Date();\n  }\n  public auth() {\n    return this.app.auth() as any;\n  }\n  public storage() {\n    return this.app.storage();\n  }\n  public async GetUserLogin(): Promise<User> {\n    return new Promise((resolve, reject) => {\n      this.app.auth().onAuthStateChanged((user) => {\n        if (user) {\n          resolve(user);\n        } else {\n          reject('getUserLogin() no user logged in');\n        }\n      });\n    });\n  }\n  public OnUserLogout(callBack: (u: firebase.User | null) => any) {\n    this.app.auth().onAuthStateChanged((user) => {\n      const isLoggedOut = !user;\n      log('FirebaseWrapper.OnUserLogout', { user, isLoggedOut });\n      if (isLoggedOut) {\n        callBack(user);\n      }\n    });\n  }\n}\n\nfunction ObtainFirebaseApp(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n): firebase.app.App {\n  if (options.app) {\n    return options.app;\n  }\n  const isInitialized = !!firebase.apps.length;\n  if (isInitialized) {\n    return firebase.app();\n  } else {\n    return firebase.initializeApp(firebaseConfig);\n  }\n}\n","// Firebase types\nimport {\n  CollectionReference,\n  QueryDocumentSnapshot,\n  FirebaseFirestore,\n} from '@firebase/firestore-types';\nimport { RAFirebaseOptions } from '../options';\nimport { IFirebaseWrapper } from './firebase/IFirebaseWrapper';\nimport {\n  log,\n  getAbsolutePath,\n  messageTypes,\n  parseAllDatesDoc,\n  logWarn,\n  IFirestoreLogger,\n} from '../../misc';\n\nexport interface IResource {\n  path: string;\n  pathAbsolute: string;\n  collection: CollectionReference;\n  list: Array<{} & { deleted?: boolean }>;\n}\n\nexport class ResourceManager {\n  private resources: {\n    [resourceName: string]: IResource;\n  } = {};\n\n  private db: FirebaseFirestore;\n\n  constructor(\n    private fireWrapper: IFirebaseWrapper,\n    private options: RAFirebaseOptions,\n    private flogger: IFirestoreLogger\n  ) {\n    this.db = fireWrapper.db();\n\n    this.fireWrapper.OnUserLogout(() => {\n      this.resources = {};\n    });\n  }\n\n  public async TryGetResource(\n    resourceName: string,\n    refresh?: 'REFRESH',\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    if (refresh) {\n      await this.RefreshResource(resourceName, collectionQuery);\n    }\n    return this.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n\n  public GetResource(relativePath: string): IResource {\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Can't find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async TryGetResourcePromise(\n    relativePath: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    log('resourceManager.TryGetResourcePromise', {\n      relativePath,\n      collectionQuery,\n    });\n    await this.initPath(relativePath);\n\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async RefreshResource(\n    relativePath: string,\n    collectionQuery: messageTypes.CollectionQueryType | undefined\n  ) {\n    if (this.options?.lazyLoading?.enabled) {\n      logWarn('resourceManager.RefreshResource', {\n        warn: 'RefreshResource is not available in lazy loading mode',\n      });\n      throw new Error(\n        'react-admin-firebase: RefreshResource is not available in lazy loading mode'\n      );\n    }\n\n    log('resourceManager.RefreshResource', { relativePath, collectionQuery });\n    await this.initPath(relativePath);\n    const resource = this.resources[relativePath];\n\n    const collection = resource.collection;\n    const query = this.applyQuery(collection, collectionQuery);\n    const newDocs = await query.get();\n\n    resource.list = newDocs.docs.map((doc) => this.parseFireStoreDocument(doc));\n    const count = newDocs.docs.length;\n    this.flogger.logDocument(count)();\n    log('resourceManager.RefreshResource', {\n      newDocs,\n      resource,\n      collectionPath: collection.path,\n    });\n  }\n\n  public async GetSingleDoc(relativePath: string, docId: string) {\n    await this.initPath(relativePath);\n    const resource = this.GetResource(relativePath);\n    this.flogger.logDocument(1)();\n    const docSnap = await resource.collection.doc(docId).get();\n    if (!docSnap.exists) {\n      throw new Error('react-admin-firebase: No id found matching: ' + docId);\n    }\n    const result = this.parseFireStoreDocument(docSnap as any);\n    log('resourceManager.GetSingleDoc', {\n      relativePath,\n      resource,\n      docId,\n      docSnap,\n      result,\n    });\n    return result;\n  }\n\n  private async initPath(relativePath: string): Promise<void> {\n    const rootRef = this.options && this.options.rootRef;\n    const absolutePath = getAbsolutePath(rootRef, relativePath);\n    const hasBeenInited = !!this.resources[relativePath];\n    log('resourceManager.initPath()', {\n      absolutePath,\n      hasBeenInited,\n    });\n    if (hasBeenInited) {\n      log('resourceManager.initPath() has been initialized already...');\n      return;\n    }\n    const collection = this.db.collection(absolutePath);\n    const list: Array<{}> = [];\n    const resource: IResource = {\n      collection,\n      list,\n      path: relativePath,\n      pathAbsolute: absolutePath,\n    };\n    this.resources[relativePath] = resource;\n    log('resourceManager.initPath() setting resource...', {\n      resource,\n      allResources: this.resources,\n      collection: collection,\n      collectionPath: collection.path,\n    });\n  }\n\n  private parseFireStoreDocument(doc: QueryDocumentSnapshot | undefined): {} {\n    if (!doc) {\n      logWarn('parseFireStoreDocument: no doc', { doc });\n      return {};\n    }\n    const data = doc.data();\n    parseAllDatesDoc(data);\n    // React Admin requires an id field on every document,\n    // So we can just using the firestore document id\n    return { id: doc.id, ...data };\n  }\n\n  public async getUserIdentifier(): Promise<string> {\n    const identifier = this.options.associateUsersById\n      ? await this.getCurrentUserId()\n      : await this.getCurrentUserEmail();\n    return identifier;\n  }\n\n  private async getCurrentUserEmail() {\n    const user = await this.fireWrapper.GetUserLogin();\n    if (user) {\n      return user.email as string;\n    } else {\n      return 'annonymous user';\n    }\n  }\n  private async getCurrentUserId() {\n    const user = await this.fireWrapper.GetUserLogin();\n    if (user) {\n      return user.uid;\n    } else {\n      return 'annonymous user';\n    }\n  }\n\n  private applyQuery(\n    collection: CollectionReference,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): CollectionReference {\n    const collRef: CollectionReference = collectionQuery\n      ? collectionQuery(collection)\n      : collection;\n\n    log('resourceManager.applyQuery() ...', {\n      collection,\n      collectionQuery: (collectionQuery || '-').toString(),\n      collRef,\n    });\n    return collRef;\n  }\n}\n","import { set } from \"lodash\";\nimport {\n  AddCreatedByFields,\n  AddUpdatedByFields,\n  IFirestoreLogger,\n  joinPaths,\n  log,\n  logError,\n  parseDocGetAllUploads,\n} from \"../../misc\";\nimport { RAFirebaseOptions } from \"../options\";\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\nimport { IResource, ResourceManager } from \"./ResourceManager\";\n\nexport class FireClient {\n  public rm: ResourceManager;\n  public db() {\n    return this.fireWrapper.db();\n  }\n\n  constructor(\n    public fireWrapper: IFirebaseWrapper,\n    public options: RAFirebaseOptions,\n    public flogger: IFirestoreLogger\n  ) {\n    this.rm = new ResourceManager(this.fireWrapper, this.options, this.flogger);\n  }\n\n  public checkRemoveIdField(obj: any, docId: string) {\n    if (!this.options.dontAddIdFieldToDoc) {\n      obj.id = docId;\n    }\n  }\n\n  public async parseDataAndUpload(r: IResource, id: string, data: any) {\n    if (!data) {\n      return data;\n    }\n    const docPath = r.collection.doc(id).path;\n\n    const uploads = parseDocGetAllUploads(data);\n    await Promise.all(\n      uploads.map(async (u) => {\n        const link = await this.uploadAndGetLink(\n          u.rawFile,\n          docPath,\n          u.fieldSlashesPath,\n          !!this.options.useFileNamesInStorage\n        );\n        set(data, u.fieldDotsPath + \".src\", link);\n      })\n    );\n    return data;\n  }\n\n  public async addCreatedByFields(obj: any) {\n    return AddCreatedByFields(obj, this.fireWrapper, this.rm, this.options);\n  }\n\n  public async addUpdatedByFields(obj: any) {\n    return AddUpdatedByFields(obj, this.fireWrapper, this.rm, this.options);\n  }\n\n  private async uploadAndGetLink(\n    rawFile: any,\n    docPath: string,\n    fieldPath: string,\n    useFileName: boolean\n  ): Promise<string | undefined> {\n    const storagePath = useFileName\n      ? joinPaths(docPath, fieldPath, rawFile.name)\n      : joinPaths(docPath, fieldPath);\n    return this.saveFile(storagePath, rawFile);\n  }\n\n  private async saveFile(\n    storagePath: string,\n    rawFile: any\n  ): Promise<string | undefined> {\n    log(\"saveFile() saving file...\", { storagePath, rawFile });\n    const task = this.fireWrapper.storage().ref(storagePath).put(rawFile);\n    try {\n      const taskResult: firebase.storage.UploadTaskSnapshot = await new Promise(\n        (res, rej) => task.then(res).catch(rej)\n      );\n      const getDownloadURL = await taskResult.ref.getDownloadURL();\n      log(\"saveFile() saved file\", {\n        storagePath,\n        taskResult,\n        getDownloadURL,\n      });\n      return this.options.relativeFilePaths ? storagePath : getDownloadURL;\n    } catch (storageError) {\n      if (storageError.code === \"storage/unknown\") {\n        logError(\n          'saveFile() error saving file, No bucket found! Try clicking \"Get Started\" in firebase -> storage',\n          { storageError }\n        );\n      } else {\n        logError(\"saveFile() error saving file\", {\n          storageError,\n        });\n      }\n    }\n  }\n}\n","import { RAFirebaseOptions } from \"index\";\nimport { IFirebaseWrapper, ResourceManager } from \"providers/database\";\n\nexport async function AddCreatedByFields(\n  obj: any,\n  fireWrapper: IFirebaseWrapper,\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\n  options: Pick<\n    RAFirebaseOptions,\n    | \"associateUsersById\"\n    | \"disableMeta\"\n    | \"renameMetaFields\"\n    | \"metaFieldCasing\"\n  >\n) {\n  if (options.disableMeta) {\n    return;\n  }\n  const currentUserIdentifier = await rm.getUserIdentifier();\n  const createAtSelector = GetSelectorsCreateAt(options);\n  const createBySelector = GetSelectorsCreateBy(options);\n  obj[createAtSelector] = fireWrapper.serverTimestamp();\n  obj[createBySelector] = currentUserIdentifier;\n}\n\nexport async function AddUpdatedByFields(\n  obj: any,\n  fireWrapper: IFirebaseWrapper,\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\n  options: Pick<\n    RAFirebaseOptions,\n    | \"associateUsersById\"\n    | \"disableMeta\"\n    | \"renameMetaFields\"\n    | \"metaFieldCasing\"\n  >\n) {\n  if (options.disableMeta) {\n    return;\n  }\n  const currentUserIdentifier = await rm.getUserIdentifier();\n  const updateAtSelector = GetSelectorsUpdateAt(options);\n  const updateBySelector = GetSelectorsUpdateBy(options);\n  obj[updateAtSelector] = fireWrapper.serverTimestamp();\n  obj[updateBySelector] = currentUserIdentifier;\n}\n\nexport function GetSelectorsUpdateAt(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.updated_at) {\n    return options.renameMetaFields.updated_at;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"lastupdate\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"lastUpdate\";\n  }\n  if (casing === \"snake\") {\n    return \"last_update\";\n  }\n  if (casing === \"pascal\") {\n    return \"LastUpdate\";\n  }\n  if (casing === \"kebab\") {\n    return \"last-update\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsUpdateBy(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.updated_by) {\n    return options.renameMetaFields.updated_by;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"updatedby\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"updatedBy\";\n  }\n  if (casing === \"snake\") {\n    return \"updated_by\";\n  }\n  if (casing === \"pascal\") {\n    return \"UpdatedBy\";\n  }\n  if (casing === \"kebab\") {\n    return \"updated-by\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsCreateAt(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.created_at) {\n    return options.renameMetaFields.created_at;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"createdate\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"createDate\";\n  }\n  if (casing === \"snake\") {\n    return \"create_date\";\n  }\n  if (casing === \"pascal\") {\n    return \"CreateDate\";\n  }\n  if (casing === \"kebab\") {\n    return \"create-date\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsCreateBy(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.created_by) {\n    return options.renameMetaFields.created_by;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"createdby\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"createdBy\";\n  }\n  if (casing === \"snake\") {\n    return \"created_by\";\n  }\n  if (casing === \"pascal\") {\n    return \"CreatedBy\";\n  }\n  if (casing === \"kebab\") {\n    return \"created-by\";\n  }\n  return defautCase;\n}\n","import {\n  CollectionReference,\n  DocumentSnapshot,\n  Query,\n} from '@firebase/firestore-types';\nimport { IFirestoreLogger, messageTypes } from '../../misc';\n\nexport function setQueryCursor(\n  doc: DocumentSnapshot,\n  params: messageTypes.IParamsGetList,\n  resourceName: string\n) {\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\n  localStorage.setItem(key, doc.id);\n\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\n  if (!localCursorKeys) {\n    localStorage.setItem(allCursorsKey, JSON.stringify([key]));\n  } else {\n    const cursors: string[] = JSON.parse(localCursorKeys);\n    const newCursors = cursors.concat(key);\n    localStorage.setItem(allCursorsKey, JSON.stringify(newCursors));\n  }\n}\n\nexport async function getQueryCursor(\n  collection: CollectionReference,\n  params: messageTypes.IParamsGetList,\n  resourceName: string,\n  flogger: IFirestoreLogger\n): Promise<DocumentSnapshot | false> {\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\n  const docId = localStorage.getItem(key);\n  if (!docId) {\n    return false;\n  }\n\n  const doc = await collection.doc(docId).get();\n  flogger.logDocument(1)();\n  if (doc.exists) {\n    // incrementFirebaseReadsCounter(1);\n    return doc;\n  }\n  return false;\n}\n\nexport function clearQueryCursors(resourceName: string) {\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\n  if (localCursorKeys) {\n    const cursors: string[] = JSON.parse(localCursorKeys);\n    cursors.forEach((cursor) => localStorage.removeItem(cursor));\n    localStorage.removeItem(allCursorsKey);\n  }\n}\n\nexport async function findLastQueryCursor(\n  collection: CollectionReference,\n  queryBase: Query,\n  params: messageTypes.IParamsGetList,\n  resourceName: string,\n  flogger: IFirestoreLogger\n) {\n  const { page, perPage } = params.pagination;\n\n  let lastQueryCursor: DocumentSnapshot | false = false;\n  let currentPage = page - 1;\n\n  const currentPageParams = {\n    ...params,\n    pagination: {\n      ...params.pagination,\n    },\n  };\n  while (!lastQueryCursor && currentPage > 1) {\n    currentPage--;\n    currentPageParams.pagination.page = currentPage;\n    console.log('getting query cursor currentPage=', currentPage);\n    lastQueryCursor = await getQueryCursor(\n      collection,\n      currentPageParams,\n      resourceName,\n      flogger\n    );\n  }\n  const limit = (page - currentPage) * perPage;\n  const isFirst = currentPage === 1;\n\n  function getQuery() {\n    if (isFirst) {\n      return queryBase.limit(limit);\n    } else {\n      return queryBase.startAt(lastQueryCursor).limit(limit);\n    }\n  }\n\n  const newQuery = getQuery();\n  const snapshots = await newQuery.get();\n  const docsLength = snapshots.docs.length;\n  flogger.logDocument(docsLength)();\n  const lastDocIndex = docsLength - 1;\n  const lastDocRef = snapshots.docs[lastDocIndex];\n  return lastDocRef;\n}\n","import {\n  CollectionReference,\n  OrderByDirection,\n  Query,\n} from '@firebase/firestore-types';\nimport { IFirestoreLogger, messageTypes } from '../../misc';\nimport { findLastQueryCursor, getQueryCursor } from './queryCursors';\n\ninterface ParamsToQueryOptions {\n  filters?: boolean;\n  sort?: boolean;\n  pagination?: boolean;\n}\n\nconst defaultParamsToQueryOptions = {\n  filters: true,\n  sort: true,\n  pagination: true,\n};\n\nexport async function paramsToQuery<\n  TParams extends messageTypes.IParamsGetList\n>(\n  collection: CollectionReference,\n  params: TParams,\n  resourceName: string,\n  flogger: IFirestoreLogger,\n  options: ParamsToQueryOptions = defaultParamsToQueryOptions\n): Promise<Query> {\n  const filtersStepQuery = options.filters\n    ? filtersToQuery(collection, params.filter)\n    : collection;\n\n  const sortStepQuery = options.sort\n    ? sortToQuery(filtersStepQuery, params.sort)\n    : filtersStepQuery;\n\n  return options.pagination\n    ? paginationToQuery(\n        sortStepQuery,\n        params,\n        collection,\n        resourceName,\n        flogger\n      )\n    : sortStepQuery;\n}\n\nexport function filtersToQuery(\n  query: Query,\n  filters: { [fieldName: string]: any }\n): Query {\n  Object.keys(filters).forEach((fieldName) => {\n    query = query.where(fieldName, '==', filters[fieldName]);\n  });\n  return query;\n}\n\nexport function sortToQuery(\n  query: Query,\n  sort: { field: string; order: string }\n): Query {\n  if (sort != null && sort.field !== 'id') {\n    const { field, order } = sort;\n    const parsedOrder = order.toLocaleLowerCase() as OrderByDirection;\n    query = query.orderBy(field, parsedOrder);\n  }\n  return query;\n}\n\nasync function paginationToQuery<TParams extends messageTypes.IParamsGetList>(\n  query: Query,\n  params: TParams,\n  collection: CollectionReference,\n  resourceName: string,\n  flogger: IFirestoreLogger\n): Promise<Query> {\n  const { page, perPage } = params.pagination;\n  if (page === 1) {\n    query = query.limit(perPage);\n  } else {\n    let queryCursor = await getQueryCursor(\n      collection,\n      params,\n      resourceName,\n      flogger\n    );\n    if (!queryCursor) {\n      queryCursor = await findLastQueryCursor(\n        collection,\n        query,\n        params,\n        resourceName,\n        flogger\n      );\n    }\n    query = query.startAfter(queryCursor).limit(perPage);\n  }\n\n  return query;\n}\n\nexport function getFullParamsForQuery<\n  TParams extends messageTypes.IParamsGetList\n>(reactAdminParams: TParams, softdeleteEnabled: boolean): TParams {\n  return {\n    ...reactAdminParams,\n    filter: softdeleteEnabled\n      ? {\n          deleted: false,\n          ...reactAdminParams.filter,\n        }\n      : reactAdminParams.filter,\n  };\n}\n\nexport function getNextPageParams<TParams extends messageTypes.IParamsGetList>(\n  params: TParams\n): TParams {\n  return {\n    ...params,\n    pagination: {\n      ...params.pagination,\n      page: params.pagination.page + 1,\n    },\n  };\n}\n","import {\n  log,\n  messageTypes,\n  parseFireStoreDocument,\n  recursivelyMapStorageUrls,\n} from '../../misc';\nimport {\n  CollectionReference,\n  DocumentSnapshot,\n} from '@firebase/firestore-types';\nimport { IResource, ResourceManager } from '../database/ResourceManager';\nimport { RAFirebaseOptions } from '../options';\nimport * as ra from '../../misc/react-admin-models';\nimport {\n  getFullParamsForQuery,\n  getNextPageParams,\n  paramsToQuery,\n} from './paramsToQuery';\nimport { clearQueryCursors, setQueryCursor } from './queryCursors';\nimport { FireClient } from 'providers/database';\n\nexport class FirebaseLazyLoadingClient {\n  constructor(\n    private readonly options: RAFirebaseOptions,\n    private readonly rm: ResourceManager,\n    private client: FireClient\n  ) {}\n\n  public async apiGetList<T extends ra.Record>(\n    resourceName: string,\n    reactAdminParams: ra.GetListParams\n  ): Promise<ra.GetListResult<T>> {\n    const r = await this.tryGetResource(resourceName);\n    const params = getFullParamsForQuery(\n      reactAdminParams,\n      !!this.options.softDelete\n    );\n\n    log('apiGetListLazy', { resourceName, params });\n\n    const query = await paramsToQuery(\n      r.collection,\n      params,\n      resourceName,\n      this.client.flogger\n    );\n\n    const snapshots = await query.get();\n\n    const resultsCount = snapshots.docs.length;\n    if (!resultsCount) {\n      log('apiGetListLazy', {\n        message: 'There are not records for given query',\n      });\n      return { data: [], total: 0 };\n    }\n    this.client.flogger.logDocument(resultsCount)();\n\n    const data = snapshots.docs.map(parseFireStoreDocument) as T[];\n    const nextPageCursor = snapshots.docs[snapshots.docs.length - 1];\n    // After fetching documents save queryCursor for next page\n    setQueryCursor(nextPageCursor, getNextPageParams(params), resourceName);\n    // Hardcoded to allow next pages, as we don't have total number of items\n    let total = 9000;\n\n    // Check for next pages\n    // If it's last page, we can count all items and disable going to next page\n    const isOnLastPage = await this.checkIfOnLastPage(\n      r.collection,\n      params,\n      resourceName,\n      nextPageCursor\n    );\n\n    if (isOnLastPage) {\n      const { page, perPage } = params.pagination;\n      total = (page - 1) * perPage + data.length;\n      log('apiGetListLazy', { message: \"It's last page of collection.\" });\n    }\n\n    if (this.options.relativeFilePaths) {\n      const parsedData = await Promise.all(\n        data.map(async (doc: any) => {\n          for (let fieldName in doc) {\n            doc[fieldName] = await recursivelyMapStorageUrls(\n              this.client.fireWrapper,\n              doc[fieldName]\n            );\n          }\n          return doc;\n        })\n      );\n\n      log('apiGetListLazy result', {\n        docs: parsedData,\n        resource: r,\n        collectionPath: r.collection.path,\n      });\n\n      return {\n        data: parsedData,\n        total,\n      };\n    }\n\n    log('apiGetListLazy result', {\n      docs: data,\n      resource: r,\n      collectionPath: r.collection.path,\n    });\n\n    return { data, total };\n  }\n\n  public async apiGetManyReference(\n    resourceName: string,\n    reactAdminParams: messageTypes.IParamsGetManyReference\n  ): Promise<messageTypes.IResponseGetManyReference> {\n    const r = await this.tryGetResource(resourceName);\n    log('apiGetManyReferenceLazy', {\n      resourceName,\n      resource: r,\n      reactAdminParams,\n    });\n    const filterWithTarget = {\n      ...reactAdminParams.filter,\n      [reactAdminParams.target]: reactAdminParams.id,\n    };\n    const params = getFullParamsForQuery(\n      {\n        ...reactAdminParams,\n        filter: filterWithTarget,\n      },\n      !!this.options.softDelete\n    );\n\n    const query = await paramsToQuery(\n      r.collection,\n      params,\n      resourceName,\n      this.client.flogger\n    );\n\n    const snapshots = await query.get();\n    const resultsCount = snapshots.docs.length;\n    this.client.flogger.logDocument(resultsCount)();\n    const data = snapshots.docs.map(parseFireStoreDocument);\n    if (this.options.relativeFilePaths) {\n      const parsedData = await Promise.all(\n        data.map(async (doc: any) => {\n          for (let fieldName in doc) {\n            doc[fieldName] = await recursivelyMapStorageUrls(\n              this.client.fireWrapper,\n              doc[fieldName]\n            );\n          }\n          return doc;\n        })\n      );\n\n      log('apiGetManyReferenceLazy result', {\n        docs: parsedData,\n        resource: r,\n        collectionPath: r.collection.path,\n      });\n\n      return {\n        data: parsedData,\n        total: data.length,\n      };\n    }\n\n    log('apiGetManyReferenceLazy result', {\n      docs: data,\n      resource: r,\n      collectionPath: r.collection.path,\n    });\n    return { data, total: data.length };\n  }\n\n  private async checkIfOnLastPage<TParams extends messageTypes.IParamsGetList>(\n    collection: CollectionReference,\n    params: TParams,\n    resourceName: string,\n    nextPageCursor: DocumentSnapshot\n  ): Promise<boolean> {\n    const query = await paramsToQuery(\n      collection,\n      params,\n      resourceName,\n      this.client.flogger,\n      {\n        filters: true,\n        sort: true,\n      }\n    );\n    if (!nextPageCursor) {\n      throw new Error('Page cursor was empty...');\n    }\n    const nextElementSnapshot = await query\n      .startAfter(nextPageCursor)\n      .limit(1)\n      .get();\n\n    if (!nextElementSnapshot.empty) {\n      // this.incrementFirebaseReadsCounter(1);\n    }\n\n    return nextElementSnapshot.empty;\n  }\n\n  public clearQueryCursors(resourceName: string) {\n    clearQueryCursors(resourceName);\n  }\n\n  private async tryGetResource(\n    resourceName: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    return this.rm.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n}\n","import {\n  getAbsolutePath,\n  log,\n  logger,\n  retrieveStatusCode,\n  logError,\n  MakeFirestoreLogger,\n} from \"../misc\";\nimport * as ra from \"../misc/react-admin-models\";\nimport { RAFirebaseOptions } from \"./options\";\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\nimport { FireApp } from \"./database/firebase/IFirebaseWrapper\";\nimport { FireClient } from \"./database/FireClient\";\nimport { GetList, GetMany, GetManyReference, GetOne } from \"./queries\";\nimport { Create, Delete, DeleteMany, Update, UpdateMany } from \"./commands\";\n\nexport interface IDataProvider extends ra.DataProvider {\n  app: FireApp;\n}\n\nexport function DataProvider(\n  firebaseConfig: {},\n  optionsInput?: RAFirebaseOptions\n): IDataProvider {\n  const options = optionsInput || {};\n  verifyDataProviderArgs(firebaseConfig, options);\n\n  const flogger = MakeFirestoreLogger(options);\n  logger.SetEnabled(!!options?.logging);\n  flogger.SetEnabled(!!options?.firestoreCostsLogger?.enabled);\n  flogger.ResetCount(!options?.firestoreCostsLogger?.persistCount);\n  log('Creating FirebaseDataProvider', {\n    firebaseConfig,\n    options\n  });\n\n  const fireWrapper = new FirebaseWrapper();\n  fireWrapper.init(firebaseConfig, optionsInput);\n\n  async function run<T>(cb: () => Promise<T>) {\n    let res: any;\n    try {\n      res = await cb();\n      return res;\n    } catch (error) {\n      const errorMsg = error.toString();\n      const code = retrieveStatusCode(errorMsg);\n      const errorObj = { status: code, message: errorMsg, json: res };\n      logError(\"DataProvider:\", error, { errorMsg, code, errorObj });\n      throw errorObj;\n    }\n  }\n  const client = new FireClient(fireWrapper, options, flogger);\n\n  const newProviderApi: IDataProvider = {\n    app: fireWrapper.GetApp(),\n    getList<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetListParams\n    ): Promise<ra.GetListResult<RecordType>> {\n      return run(() => GetList<RecordType>(resource, params, client));\n    },\n    getOne<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetOneParams\n    ): Promise<ra.GetOneResult<RecordType>> {\n      return run(() => GetOne<RecordType>(resource, params, client));\n    },\n    getMany<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetManyParams\n    ): Promise<ra.GetManyResult<RecordType>> {\n      return run(() => GetMany<RecordType>(resource, params, client));\n    },\n    getManyReference<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetManyReferenceParams\n    ): Promise<ra.GetManyReferenceResult<RecordType>> {\n      return run(() =>\n        GetManyReference<RecordType>(resource, params, client)\n      );\n    },\n    update<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.UpdateParams\n    ): Promise<ra.UpdateResult<RecordType>> {\n      return run(() => Update<RecordType>(resource, params, client));\n    },\n    updateMany(\n      resource: string,\n      params: ra.UpdateManyParams\n    ): Promise<ra.UpdateManyResult> {\n      return run(() => UpdateMany(resource, params, client));\n    },\n    create<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.CreateParams\n    ): Promise<ra.CreateResult<RecordType>> {\n      return run(() => Create<RecordType>(resource, params, client));\n    },\n    delete<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.DeleteParams\n    ): Promise<ra.DeleteResult<RecordType>> {\n      return run(() => Delete(resource, params, client));\n    },\n    deleteMany(\n      resource: string,\n      params: ra.DeleteManyParams\n    ): Promise<ra.DeleteManyResult> {\n      return run(() => DeleteMany(resource, params, client));\n    },\n  };\n\n  return newProviderApi;\n}\n\nfunction verifyDataProviderArgs(\n  firebaseConfig: {},\n  options?: RAFirebaseOptions\n) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\n    );\n  }\n  if (options && options.rootRef) {\n    // Will throw error if rootRef doesn't point to a document\n    getAbsolutePath(options.rootRef, 'test');\n  }\n}\n","// From firebase SDK\n\nimport { logError } from \"./logger\";\n\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\nexport function retrieveStatusTxt(status: number): 'ok' | 'unauthenticated' {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 401: // 'unauthenticated'\n    case 403: // 'permission-denied'\n      return 'unauthenticated';\n\n    case 0: // 'internal'\n    case 400: // 'invalid-argument'\n    case 404: // 'not-found'\n    case 409: // 'aborted'\n    case 429: // 'resource-exhausted'\n    case 499: // 'cancelled'\n    case 500: // 'internal'\n    case 501: // 'unimplemented'\n    case 503: // 'unavailable'\n    case 504: // 'deadline-exceeded'\n    default:\n      // ignore\n      return 'ok';\n  }\n}\n\n// From firebase SDK\n// tslint:disable-next-line:max-line-length\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\nexport function retrieveStatusCode(statusTxt: string): number {\n  // Make sure any successful status is OK.\n  const regexResult = /\\[code\\=([\\w-]*)/g.exec(statusTxt);\n  const status = Array.isArray(regexResult) && regexResult[1];\n  if (!status) {\n    logError('unknown StatusCode ', {statusTxt});\n  }\n  switch (status) {\n    case 'unauthenticated':\n      return 401;\n    case 'permission-denied':\n      return 403;\n    case 'internal':\n      return 0;\n    case 'invalid-argument':\n      return 400;\n    case 'not-found':\n      return 404;\n    case 'aborted':\n      return 409;\n    case 'resource-exhausted':\n      return 429;\n    case 'cancelled':\n      return 499;\n    case 'internal':\n      return 500;\n    case 'unimplemented':\n      return 501;\n    case 'unavailable':\n      return 503;\n    case 'deadline-exceeded':\n      return 504;\n    default:\n      return 200;\n  }\n}\n","import { FireClient } from '../database/FireClient';\nimport { FirebaseLazyLoadingClient } from '../lazy-loading/FirebaseLazyLoadingClient';\nimport {\n  filterArray,\n  log,\n  recursivelyMapStorageUrls,\n  sortArray,\n} from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetList<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetListParams,\n  client: FireClient\n): Promise<ra.GetListResult<T>> {\n  log('GetList', { resourceName, params });\n  const { rm, fireWrapper, options } = client;\n\n  if (options?.lazyLoading?.enabled) {\n    const lazyClient = new FirebaseLazyLoadingClient(\n      options,\n      rm,\n      client\n    );\n    return lazyClient.apiGetList<T>(resourceName, params);\n  }\n\n  const filterSafe = params.filter || {};\n\n  const collectionQuery = filterSafe.collectionQuery;\n  delete filterSafe.collectionQuery;\n\n  const r = await rm.TryGetResource(resourceName, 'REFRESH', collectionQuery);\n  const data = r.list;\n  if (params.sort != null) {\n    const { field, order } = params.sort;\n    if (order === 'ASC') {\n      sortArray(data, field, 'asc');\n    } else {\n      sortArray(data, field, 'desc');\n    }\n  }\n  let softDeleted = data;\n  if (options.softDelete && !Object.keys(filterSafe).includes('deleted')) {\n    softDeleted = data.filter((doc) => !doc.deleted);\n  }\n  const filteredData = filterArray(softDeleted, filterSafe);\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n  const pageEnd = pageStart + params.pagination.perPage;\n  const dataPage = filteredData.slice(pageStart, pageEnd) as T[];\n  const total = filteredData.length;\n\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      dataPage.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\n    );\n    return {\n      data,\n      total,\n    };\n  }\n\n  return {\n    data: dataPage,\n    total,\n  };\n}\n","import { FireClient } from '../database/FireClient';\nimport { log, recursivelyMapStorageUrls } from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetOne<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetOneParams,\n  client: FireClient\n): Promise<ra.GetOneResult<T>> {\n  log('GetOne', { resourceName, params });\n  const { rm, fireWrapper } = client;\n  try {\n    const id = params.id + '';\n    const dataSingle = await rm.GetSingleDoc(resourceName, id);\n    client.flogger.logDocument(1)();\n    const data = await recursivelyMapStorageUrls(fireWrapper, dataSingle);\n    return { data: data };\n  } catch (error) {\n    throw new Error(\n      'Error getting id: ' + params.id + ' from collection: ' + resourceName\n    );\n  }\n}\n","import { FireClient } from '../database/FireClient';\nimport { log, recursivelyMapStorageUrls } from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetMany<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetManyParams,\n  client: FireClient\n): Promise<ra.GetManyResult<T>> {\n  const { rm, options, fireWrapper } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log('GetMany', { resourceName, resource: r, params });\n  const ids = params.ids;\n  const matchDocSnaps = await Promise.all(\n    ids.map((id) => r.collection.doc(id + '').get())\n  );\n  client.flogger.logDocument(ids.length)();\n  const matches = matchDocSnaps.map((snap) => {\n    return { ...snap.data(), id: snap.id } as T;\n  });\n  const permittedData = options.softDelete\n    ? matches.filter((row) => !row['deleted'])\n    : matches;\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      permittedData.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\n    );\n    return {\n      data,\n    };\n  }\n\n  return {\n    data: permittedData,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { filterArray, log, recursivelyMapStorageUrls, sortArray } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function GetManyReference<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetManyReferenceParams,\n  client: FireClient\n): Promise<ra.GetManyReferenceResult<T>> {\n  const { rm, options, fireWrapper } = client;\n  log(\"GetManyReference\", { resourceName, params });\n  const filterSafe = params.filter || {};\n  const collectionQuery = filterSafe.collectionQuery;\n  const r = await rm.TryGetResource(\n    resourceName,\n    \"REFRESH\",\n    collectionQuery\n  );\n  delete filterSafe.collectionQuery;\n  log(\"apiGetManyReference\", { resourceName, resource: r, params });\n  const data = r.list;\n  const targetField = params.target;\n  const targetValue = params.id;\n  let softDeleted = data;\n  if (options.softDelete) {\n    softDeleted = data.filter(doc => !doc['deleted'])\n  }\n  const filteredData = filterArray(softDeleted, filterSafe);\n  const targetIdFilter = {} as any;\n  targetIdFilter[targetField] = targetValue;\n  const permittedData = filterArray(filteredData, targetIdFilter);\n  if (params.sort != null) {\n    const { field, order } = params.sort;\n    if (order === \"ASC\") {\n      sortArray(permittedData, field, \"asc\");\n    } else {\n      sortArray(permittedData, field, \"desc\");\n    }\n  }\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n  const pageEnd = pageStart + params.pagination.perPage;\n  const dataPage = permittedData.slice(pageStart, pageEnd) as T[];\n  const total = permittedData.length;\n\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      permittedData.map((doc) =>\n        recursivelyMapStorageUrls(fireWrapper, doc)\n      )\n    );\n    return { data, total };\n  }\n\n  return { data: dataPage, total };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function Update<T extends ra.Record>(\n  resourceName: string,\n  params: ra.UpdateParams,\n  client: FireClient\n): Promise<ra.UpdateResult<T>> {\n  const { rm } = client;\n  log(\"Update\", { resourceName, params });\n  const id = params.id + \"\";\n  delete params.data.id;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"Update\", { resourceName, resource: r, params });\n  const data = await client.parseDataAndUpload(r, id, params.data);\n  const docObj = { ...data };\n  client.checkRemoveIdField(docObj, id);\n  await client.addUpdatedByFields(docObj);\n  await r.collection.doc(id).update(docObj);\n  return {\n    data: {\n      ...data,\n      id: id,\n    },\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function UpdateMany(\n  resourceName: string,\n  params: ra.UpdateManyParams,\n  client: FireClient\n): Promise<ra.UpdateManyResult> {\n  const { rm } = client;\n  log(\"UpdateMany\", { resourceName, params });\n  delete params.data.id;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"UpdateMany\", { resourceName, resource: r, params });\n  const ids = params.ids;\n  const returnData = await Promise.all(\n    ids.map(async id => {\n      const idStr = id+'';\n      const data = await client.parseDataAndUpload(r, idStr, params.data);\n      const docObj = { ...data };\n      client.checkRemoveIdField(docObj, idStr);\n      await client.addUpdatedByFields(docObj);\n      await r.collection\n        .doc(idStr)\n        .update(docObj);\n      return {\n        ...data,\n        id: idStr\n      };\n    })\n  );\n  return {\n    data: returnData\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function Create<T extends ra.Record>(\n  resourceName: string,\n  params: ra.CreateParams,\n  client: FireClient\n): Promise<ra.CreateResult<T>> {\n  const { rm, fireWrapper } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"Create\", { resourceName, resource: r, params });\n  const hasOverridenDocId = params.data && params.data.id;\n  log(\"Create\", { hasOverridenDocId });\n  if (hasOverridenDocId) {\n    const overridenId = params.data.id;\n    const exists = (await r.collection.doc(overridenId).get()).exists;\n    if (exists) {\n      throw new Error(\n        `the id:\"${overridenId}\" already exists, please use a unique string if overriding the 'id' field`\n      );\n    }\n    const data = await client.parseDataAndUpload(r, overridenId, params.data);\n    if (!overridenId) {\n      throw new Error(\"id must be a valid string\");\n    }\n    const docObj = { ...data };\n    client.checkRemoveIdField(docObj, overridenId);\n    await client.addCreatedByFields(docObj);\n    await client.addUpdatedByFields(docObj);\n    log(\"Create\", { docObj });\n    await r.collection.doc(overridenId).set(docObj, { merge: false });\n    return {\n      data: {\n        ...data,\n        id: overridenId,\n      },\n    };\n  }\n  const newId = fireWrapper.db().collection(\"collections\").doc().id;\n  const data = await client.parseDataAndUpload(r, newId, params.data);\n  const docObj = { ...data };\n  client.checkRemoveIdField(docObj, newId);\n  await client.addCreatedByFields(docObj);\n  await client.addUpdatedByFields(docObj);\n  await r.collection.doc(newId).set(docObj, { merge: false });\n  return {\n    data: {\n      ...data,\n      id: newId,\n    },\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\nimport { DeleteSoft } from \"./Delete.Soft\";\n\nexport async function Delete<T extends ra.Record>(\n  resourceName: string,\n  params: ra.DeleteParams,\n  client: FireClient\n): Promise<ra.DeleteResult<T>> {\n  const { rm, options } = client;\n  if (options.softDelete) {\n    return DeleteSoft(resourceName, params, client);\n  }\n  const r = await rm.TryGetResource(resourceName);\n  log(\"apiDelete\", { resourceName, resource: r, params });\n  try {\n    const id = params.id + \"\";\n    await r.collection.doc(id).delete();\n  } catch (error) {\n    throw new Error(error);\n  }\n  return {\n    data: params.previousData as T,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log, logError } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function DeleteSoft<T extends ra.Record>(\n  resourceName: string,\n  params: ra.DeleteParams,\n  client: FireClient\n): Promise<ra.DeleteResult<T>> {\n  const { rm } = client;\n  const id = params.id + \"\";\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteSoft\", { resourceName, resource: r, params });\n  const docObj = { deleted: true };\n  await client.addUpdatedByFields(docObj);\n  r.collection\n    .doc(id)\n    .update(docObj)\n    .catch((error) => {\n      logError(\"DeleteSoft error\", { error });\n    });\n  return {\n    data: params.previousData as T,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\nimport { DeleteManySoft } from \"./DeleteMany.Soft\";\n\ntype DocumentRef = firebase.firestore.DocumentReference<any>;\n\nexport async function DeleteMany(\n  resourceName: string,\n  params: ra.DeleteManyParams,\n  client: FireClient\n): Promise<ra.DeleteManyResult> {\n  const { options, rm, fireWrapper } = client;\n  if (options.softDelete) {\n    return DeleteManySoft(resourceName, params, client);\n  }\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteMany\", { resourceName, resource: r, params });\n  const returnData: ra.Identifier[] = [];\n  const batch = fireWrapper.db().batch();\n  for (const id of params.ids) {\n    const idStr = id + '';\n    const docToDelete = r.collection.doc(idStr) as DocumentRef;\n    batch.delete(docToDelete);\n    returnData.push(id);\n  }\n  try {\n    await batch.commit();\n  } catch (error) {\n    throw new Error(error)\n  }\n  return { data: returnData };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log, logError } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function DeleteManySoft(\n  resourceName: string,\n  params: ra.DeleteManyParams,\n  client: FireClient\n): Promise<ra.DeleteManyResult> {\n  const { rm } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteManySoft\", { resourceName, resource: r, params });\n  const ids = params.ids;\n  const returnData = await Promise.all(\n    ids.map(async (id) => {\n      const idStr = id + \"\";\n      const docObj = { deleted: true };\n      await client.addUpdatedByFields(docObj);\n      r.collection\n        .doc(idStr)\n        .update(docObj)\n        .catch((error) => {\n          logError(\"apiSoftDeleteMany error\", { error });\n        });\n      return idStr;\n    })\n  );\n  return {\n    data: returnData,\n  };\n}\n","import { messageTypes } from './../misc/messageTypes';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { FirebaseAuth, User } from '@firebase/auth-types';\nimport { log, retrieveStatusTxt, logWarn, logger } from '../misc';\nimport { RAFirebaseOptions } from './options';\nimport { FirebaseWrapper } from './database/firebase/FirebaseWrapper';\nimport {\n  AuthProvider as RaAuthProvider,\n  UserIdentity,\n} from '../misc/react-admin-models';\n\nclass AuthClient {\n  private auth: FirebaseAuth;\n\n  constructor(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\n    const options = optionsInput || {};\n    log('Auth Client: initializing...', { firebaseConfig, options });\n    const fireWrapper = new FirebaseWrapper();\n    fireWrapper.init(firebaseConfig, options);\n    this.auth = fireWrapper.auth();\n    options.persistence && this.setPersistence(options.persistence);\n  }\n\n  setPersistence(persistenceInput: 'session' | 'local' | 'none') {\n    let persistenceResolved: string;\n    switch (persistenceInput) {\n      case 'local':\n        persistenceResolved = firebase.auth.Auth.Persistence.LOCAL;\n        break;\n      case 'none':\n        persistenceResolved = firebase.auth.Auth.Persistence.NONE;\n        break;\n      case 'session':\n      default:\n        persistenceResolved = firebase.auth.Auth.Persistence.SESSION;\n        break;\n    }\n    log('setPersistence', { persistenceInput, persistenceResolved });\n    this.auth\n      .setPersistence(persistenceResolved)\n      .catch((error) => console.error(error));\n  }\n\n  public async HandleAuthLogin(params: { username: string; password: string }) {\n    const { username, password } = params;\n\n    if (username && password) {\n      try {\n        const user = await this.auth.signInWithEmailAndPassword(\n          username,\n          password\n        );\n        log('HandleAuthLogin: user sucessfully logged in', { user });\n        return user;\n      } catch (e) {\n        log('HandleAuthLogin: invalid credentials', { params });\n        throw new Error('Login error: invalid credentials');\n      }\n    } else {\n      return this.getUserLogin();\n    }\n  }\n\n  public HandleAuthLogout() {\n    return this.auth.signOut();\n  }\n\n  public HandleAuthError(errorHttp: messageTypes.HttpErrorType) {\n    log('HandleAuthLogin: invalid credentials', { errorHttp });\n    const status = !!errorHttp && errorHttp.status;\n    const statusTxt = retrieveStatusTxt(status);\n    if (statusTxt === 'ok') {\n      log('API is actually authenticated');\n      return Promise.resolve();\n    }\n    logWarn('Recieved authentication error from API');\n    return Promise.reject();\n  }\n\n  public async HandleAuthCheck(): Promise<void> {\n    return this.getUserLogin() as any; // Prevents breaking change\n  }\n\n  public getUserLogin(): Promise<User> {\n    return new Promise((resolve, reject) => {\n      if (this.auth.currentUser) return resolve(this.auth.currentUser);\n      const unsubscribe = this.auth.onAuthStateChanged((user) => {\n        unsubscribe();\n        if (user) {\n          resolve(user);\n        } else {\n          reject();\n        }\n      });\n    });\n  }\n\n  public async HandleGetPermissions() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.claims;\n    } catch (e) {\n      log('HandleGetPermission: no user is logged in or tokenResult error', {\n        e,\n      });\n      return null;\n    }\n  }\n\n  public async HandleGetIdentity(): Promise<UserIdentity> {\n    try {\n      const { uid, displayName, photoURL } = await this.getUserLogin();\n      const identity: UserIdentity = {\n        id: uid,\n        fullName: `${displayName ?? ''}`,\n        avatar: `${photoURL ?? ''}`,\n      };\n      return identity;\n    } catch (e) {\n      log('HandleGetIdentity: no user is logged in', {\n        e,\n      });\n      return null as any;\n    }\n  }\n\n  public async HandleGetJWTAuthTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.authTime;\n    } catch (e) {\n      log('HandleGetJWTAuthTime: no user is logged in or tokenResult error', {\n        e,\n      });\n      return null;\n    }\n  }\n\n  public async HandleGetJWTExpirationTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.expirationTime;\n    } catch (e) {\n      log(\n        'HandleGetJWTExpirationTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTSignInProvider() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.signInProvider;\n    } catch (e) {\n      log(\n        'HandleGetJWTSignInProvider: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTIssuedAtTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.issuedAtTime;\n    } catch (e) {\n      log(\n        'HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTToken() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.token;\n    } catch (e) {\n      log(\n        'HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n}\n\nexport function AuthProvider(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n): RaAuthProvider {\n  VerifyAuthProviderArgs(firebaseConfig, options);\n  logger.SetEnabled(!!options?.logging);\n  const auth = new AuthClient(firebaseConfig, options);\n\n  const provider: RaAuthProvider = {\n    // React Admin Interface\n    login: (params) => auth.HandleAuthLogin(params),\n    logout: () => auth.HandleAuthLogout(),\n    checkAuth: () => auth.HandleAuthCheck(),\n    checkError: (error) => auth.HandleAuthError(error),\n    getPermissions: () => auth.HandleGetPermissions(),\n    getIdentity: () => auth.HandleGetIdentity(),\n    // Custom Functions\n    getAuthUser: () => auth.getUserLogin(),\n    getJWTAuthTime: () => auth.HandleGetJWTAuthTime(),\n    getJWTExpirationTime: () => auth.HandleGetJWTExpirationTime(),\n    getJWTSignInProvider: () => auth.HandleGetJWTSignInProvider(),\n    getJWTClaims: () => auth.HandleGetPermissions(),\n    getJWTToken: () => auth.HandleGetJWTToken(),\n  };\n  return provider;\n}\n\nfunction VerifyAuthProviderArgs(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\n    );\n  }\n}\n"],"names":["parseAllDatesDoc","obj","Object","keys","map","key","recusivelyCheckObjectValue","input","toDate","Array","isArray","value","parseFireStoreDocument","doc","data","id","sortArray","field","dir","sort","a","b","rawA","get","rawB","isAsc","Number","isFinite","basicSort","toLowerCase","Date","aValue","bValue","filterArray","searchFields","isEmpty","searchObjs","fieldName","getSubObjects","searchField","searchValue","tree","leaves","recursivelyWalk","path","hasOwnProperty","objVal","currentPath","push","objectFlatten","getFieldReferences","filter","row","reduce","acc","cur","searchThis","toString","includes","doesRowMatch","LogNoOp","args","LoggerBase","constructor","title","cacheEnabledKey","this","isEnabled","localStorage","getItem","SetEnabled","setItem","removeItem","log","console","bind","warn","error","logger","logError","logWarn","KEY_SINGLE","recursivelyMapStorageUrls","async","fireWrapper","fieldValue","isObject","src","startsWith","ref","storage","getDownloadURL","i","length","getAbsolutePath","rootRef","relativePath","Error","rootRefValue","withSlashes","join","split","slice","joinPaths","FirebaseWrapper","GetApp","app","init","firebaseConfig","options","optionsSafe","firebase","apps","initializeApp","ObtainFirebaseApp","firestore","db","serverTimestamp","auth","[object Object]","Promise","resolve","reject","onAuthStateChanged","user","OnUserLogout","callBack","isLoggedOut","ResourceManager","flogger","resources","resourceName","refresh","collectionQuery","RefreshResource","TryGetResourcePromise","GetResource","resource","initPath","_this$options","lazyLoading","_this$options$lazyLoa","enabled","collection","query","applyQuery","newDocs","list","docs","logDocument","collectionPath","docId","docSnap","exists","result","absolutePath","hasBeenInited","pathAbsolute","allResources","associateUsersById","getCurrentUserId","getCurrentUserEmail","GetUserLogin","email","uid","collRef","FireClient","rm","checkRemoveIdField","dontAddIdFieldToDoc","r","docPath","uploads","recusivelyParseObjectValue","fieldPath","index","fieldDotsPath","fieldSlashesPath","rawFile","parseDocGetAllUploads","all","u","link","_this","uploadAndGetLink","useFileNamesInStorage","set","disableMeta","currentUserIdentifier","getUserIdentifier","createAtSelector","renameMetaFields","created_at","casing","metaFieldCasing","GetSelectorsCreateAt","createBySelector","created_by","GetSelectorsCreateBy","AddCreatedByFields","updateAtSelector","updated_at","GetSelectorsUpdateAt","updateBySelector","updated_by","GetSelectorsUpdateBy","AddUpdatedByFields","useFileName","storagePath","name","saveFile","task","put","taskResult","res","rej","then","catch","relativeFilePaths","storageError","code","getQueryCursor","params","btoa","JSON","stringify","defaultParamsToQueryOptions","filters","pagination","paramsToQuery","filtersStepQuery","forEach","where","sortStepQuery","order","parsedOrder","toLocaleLowerCase","orderBy","sortToQuery","page","perPage","limit","queryCursor","queryBase","lastQueryCursor","currentPage","currentPageParams","newQuery","startAt","snapshots","docsLength","findLastQueryCursor","startAfter","paginationToQuery","getFullParamsForQuery","reactAdminParams","softdeleteEnabled","deleted","FirebaseLazyLoadingClient","client","tryGetResource","softDelete","resultsCount","message","total","nextPageCursor","allCursorsKey","localCursorKeys","newCursors","parse","concat","setQueryCursor","getNextPageParams","checkIfOnLastPage","parsedData","filterWithTarget","target","_this2","empty","clearQueryCursors","cursor","DataProvider","optionsInput","verifyDataProviderArgs","ResetCount","shouldReset","docCount","_options$lazyLoading","count","incrementBy","currentCountRaw","incremented","parseInt","incrementRead","MakeFirestoreLogger","logging","firestoreCostsLogger","_options$firestoreCos","_options$firestoreCos2","persistCount","run","cb","errorMsg","statusTxt","regexResult","exec","status","retrieveStatusCode","errorObj","json","getList","apiGetList","filterSafe","TryGetResource","softDeleted","filteredData","pageStart","dataPage","GetList","getOne","dataSingle","GetSingleDoc","GetOne","getMany","ids","matchDocSnaps","matches","snap","permittedData","GetMany","getManyReference","targetField","targetValue","targetIdFilter","GetManyReference","update","parseDataAndUpload","docObj","addUpdatedByFields","Update","updateMany","idStr","UpdateMany","create","hasOverridenDocId","overridenId","addCreatedByFields","merge","newId","Create","delete","previousData","DeleteSoft","Delete","deleteMany","DeleteManySoft","returnData","batch","docToDelete","commit","DeleteMany","AuthClient","persistence","setPersistence","persistenceInput","persistenceResolved","Auth","Persistence","LOCAL","NONE","SESSION","username","password","getUserLogin","signInWithEmailAndPassword","e","HandleAuthLogout","signOut","HandleAuthError","errorHttp","retrieveStatusTxt","currentUser","unsubscribe","getIdTokenResult","claims","displayName","photoURL","fullName","avatar","authTime","expirationTime","signInProvider","issuedAtTime","token","AuthProvider","VerifyAuthProviderArgs","login","HandleAuthLogin","logout","checkAuth","HandleAuthCheck","checkError","getPermissions","HandleGetPermissions","getIdentity","HandleGetIdentity","getAuthUser","getJWTAuthTime","HandleGetJWTAuthTime","getJWTExpirationTime","HandleGetJWTExpirationTime","getJWTSignInProvider","HandleGetJWTSignInProvider","getJWTClaims","getJWTToken","HandleGetJWTToken"],"mappings":"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"}