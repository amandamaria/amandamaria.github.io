{"ast":null,"code":"// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n} // Resolves . and .. elements in a path with directory names\n\n\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length) code = path.charCodeAt(i);else if (code === 47\n    /*/*/\n    ) break;else code = 47\n    /*/*/\n    ;\n\n    if (code === 47\n    /*/*/\n    ) {\n      if (lastSlash === i - 1 || dots === 1) {// NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46\n        /*.*/\n        || res.charCodeAt(res.length - 2) !== 46\n        /*.*/\n        ) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n\n        if (allowAboveRoot) {\n          if (res.length > 0) res += '/..';else res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) res += '/' + path.slice(lastSlash + 1, i);else res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46\n    /*.*/\n    && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n\n  if (!dir) {\n    return base;\n  }\n\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0) path = arguments[i];else {\n        if (cwd === undefined) cwd = process.cwd();\n        path = cwd;\n      }\n      assertPath(path); // Skip empty entries\n\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47\n      /*/*/\n      ;\n    } // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path\n\n\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0) return '/' + resolvedPath;else return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n  normalize: function normalize(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var isAbsolute = path.charCodeAt(0) === 47\n    /*/*/\n    ;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47\n    /*/*/\n    ; // Normalize the path\n\n    path = normalizeStringPosix(path, !isAbsolute);\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47\n    /*/*/\n    ;\n  },\n  join: function join() {\n    if (arguments.length === 0) return '.';\n    var joined;\n\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n\n      if (arg.length > 0) {\n        if (joined === undefined) joined = arg;else joined += '/' + arg;\n      }\n    }\n\n    if (joined === undefined) return '.';\n    return posix.normalize(joined);\n  },\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n    if (from === to) return '';\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n    if (from === to) return ''; // Trim any leading backslashes\n\n    var fromStart = 1;\n\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart; // Trim any leading backslashes\n\n    var toStart = 1;\n\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var toEnd = to.length;\n    var toLen = toEnd - toStart; // Compare paths to find the longest common path from root\n\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47\n          /*/*/\n          ) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47\n          /*/*/\n          ) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n\n        break;\n      }\n\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode) break;else if (fromCode === 47\n      /*/*/\n      ) lastCommonSep = i;\n    }\n\n    var out = ''; // Generate the relative path based on the path difference between `to`\n    // and `from`\n\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47\n      /*/*/\n      ) {\n        if (out.length === 0) out += '..';else out += '/..';\n      }\n    } // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n\n\n    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47\n      /*/*/\n      ) ++toStart;\n      return to.slice(toStart);\n    }\n  },\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47\n    /*/*/\n    ;\n    var end = -1;\n    var matchedSlash = true;\n\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n\n        if (code === 47\n        /*/*/\n        ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47\n        /*/*/\n        ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0;\n\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n\n    return path.slice(startDot, end);\n  },\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n\n    return _format('/', pathObject);\n  },\n  parse: function parse(path) {\n    assertPath(path);\n    var ret = {\n      root: '',\n      dir: '',\n      base: '',\n      ext: '',\n      name: ''\n    };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47\n    /*/*/\n    ;\n    var start;\n\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0; // Get non-dir info\n\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n    return ret;\n  },\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\nposix.posix = posix;\nmodule.exports = posix;","map":{"version":3,"sources":["C:/Users/Amanda/Documents/git/amandamaria.github.io/obama-admin/obamaadmin/node_modules/react-admin-firebase/node_modules/path-browserify/index.js"],"names":["assertPath","path","TypeError","JSON","stringify","normalizeStringPosix","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","code","i","length","charCodeAt","lastSlashIndex","lastIndexOf","slice","_format","sep","pathObject","dir","root","base","name","ext","posix","resolve","resolvedPath","resolvedAbsolute","cwd","arguments","undefined","process","normalize","isAbsolute","trailingSeparator","join","joined","arg","relative","from","to","fromStart","fromEnd","fromLen","toStart","toEnd","toLen","lastCommonSep","fromCode","toCode","out","_makeLong","dirname","hasRoot","end","matchedSlash","basename","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","parse","ret","delimiter","win32","module","exports"],"mappings":"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","sourcesContent":["// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n"]},"metadata":{},"sourceType":"script"}